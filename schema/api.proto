syntax = "proto3";

package meme.api;
option go_package = "github.com/materkov/meme9/api";

service Posts {
  rpc Add(AddReq) returns (Post);
  rpc List(ListReq) returns (PostsList);
  rpc Delete(PostsDeleteReq) returns (Void);
  rpc Like(PostsLikeReq) returns (Void);
}

message Void {
}

message AddReq {
  string text = 1;
  string pollId = 2;
}

message Post {
  string id = 1;
  string userId = 2;
  string date = 3;
  string text = 4;
  User user = 5;

  bool isLiked = 6;
  int32 likesCount = 7;

  PostLink link = 8;
  Poll poll = 9;
}

message PostLink {
  string url = 1;
  string title = 2;
  string description = 3;
  string imageUrl = 4;
  string domain = 5;
}

message PostsList {
  repeated Post items = 1;
  string pageToken = 2;
}

enum FeedType {
  FEED = 0;
  DISCOVER = 1;
}

message ListReq {
  FeedType type = 1;
  string byUserId = 2;
  string byId = 3;
  int32 count = 4;
  string pageToken = 5;
}

message PostsDeleteReq {
  string postId = 1;
}

enum PostLikeAction {
  LIKE = 0;
  UNLIKE = 1;
}

message PostsLikeReq {
  string postId = 1;
  PostLikeAction action = 2;
}

service Users {
  rpc List(UsersListReq) returns (UsersList);
  rpc SetStatus(UsersSetStatus) returns (Void);
  rpc Follow(UsersFollowReq) returns (Void);
}

message User {
  string id = 1;
  string name = 2;
  string status = 3;
  bool isFollowing = 4;
}

message UsersList {
  repeated User users = 1;
}

message UsersListReq {
  repeated string userIds = 1;
}

message UsersSetStatus {
  string status = 1;
}

enum SubscribeAction {
  FOLLOW = 0;
  UNFOLLOW = 1;
}

message UsersFollowReq {
  string targetId = 1;
  SubscribeAction action = 2;
}

service Auth {
  rpc Login(EmailReq) returns (AuthResp);
  rpc Register(EmailReq) returns (AuthResp);
  rpc Vk(VkReq) returns (AuthResp);
  rpc CheckAuth(CheckAuthReq) returns (AuthResp);
}

message CheckAuthReq {
  string token = 1;
}

message EmailReq {
  string email = 1;
  string password = 2;
}

message AuthResp {
  string token = 1;
  string userId = 2;
  string userName = 3;
}

message VkReq {
  string code = 1;
  string redirectUrl = 2;
}

service Polls {
  rpc Add(PollsAddReq) returns (Poll);
  rpc List(PollsListReq) returns (PollsList);
  rpc Vote(PollsVoteReq) returns (Void);
  rpc DeleteVote(PollsDeleteVoteReq) returns (Void);
}

message PollsList {
  repeated Poll items = 1;
}

message PollsAddReq {
  string question = 1;
  repeated string answers = 2;
}

message Poll {
  string id = 1;
  string question = 2;
  repeated PollAnswer answers = 3;
}

message PollAnswer {
  string id = 1;
  string answer = 2;
  int32 votedCount = 3;
  bool isVoted = 4;
}

message PollsListReq {
  repeated string ids = 1;
}

message PollsVoteReq {
  string pollId = 1;
  repeated string answerIds = 2;
}

message PollsDeleteVoteReq {
  string pollId = 1;
}


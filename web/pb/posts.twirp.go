// Code generated by protoc-gen-twirp v8.0.0, DO NOT EDIT.
// source: posts.proto

package pb

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the twirp package used in your project.
// A compilation error at this line likely means your copy of the
// twirp package needs to be updated.
const _ = twirp.TwirpPackageIsVersion7

// ===============
// Posts Interface
// ===============

type Posts interface {
	Add(context.Context, *PostsAddRequest) (*PostsAddResponse, error)

	ToggleLike(context.Context, *ToggleLikeRequest) (*ToggleLikeResponse, error)

	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
}

// =====================
// Posts Protobuf Client
// =====================

type postsProtobufClient struct {
	client      HTTPClient
	urls        [3]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPostsProtobufClient creates a Protobuf client that implements the Posts interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPostsProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Posts {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "meme", "Posts")
	urls := [3]string{
		serviceURL + "Add",
		serviceURL + "ToggleLike",
		serviceURL + "AddComment",
	}

	return &postsProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *postsProtobufClient) Add(ctx context.Context, in *PostsAddRequest) (*PostsAddResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Posts")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	caller := c.callAdd
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PostsAddRequest) (*PostsAddResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PostsAddRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PostsAddRequest) when calling interceptor")
					}
					return c.callAdd(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PostsAddResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PostsAddResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *postsProtobufClient) callAdd(ctx context.Context, in *PostsAddRequest) (*PostsAddResponse, error) {
	out := new(PostsAddResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *postsProtobufClient) ToggleLike(ctx context.Context, in *ToggleLikeRequest) (*ToggleLikeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Posts")
	ctx = ctxsetters.WithMethodName(ctx, "ToggleLike")
	caller := c.callToggleLike
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ToggleLikeRequest) (*ToggleLikeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ToggleLikeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ToggleLikeRequest) when calling interceptor")
					}
					return c.callToggleLike(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ToggleLikeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ToggleLikeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *postsProtobufClient) callToggleLike(ctx context.Context, in *ToggleLikeRequest) (*ToggleLikeResponse, error) {
	out := new(ToggleLikeResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *postsProtobufClient) AddComment(ctx context.Context, in *AddCommentRequest) (*AddCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Posts")
	ctx = ctxsetters.WithMethodName(ctx, "AddComment")
	caller := c.callAddComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddCommentRequest) (*AddCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddCommentRequest) when calling interceptor")
					}
					return c.callAddComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *postsProtobufClient) callAddComment(ctx context.Context, in *AddCommentRequest) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =================
// Posts JSON Client
// =================

type postsJSONClient struct {
	client      HTTPClient
	urls        [3]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPostsJSONClient creates a JSON client that implements the Posts interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPostsJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Posts {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "meme", "Posts")
	urls := [3]string{
		serviceURL + "Add",
		serviceURL + "ToggleLike",
		serviceURL + "AddComment",
	}

	return &postsJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *postsJSONClient) Add(ctx context.Context, in *PostsAddRequest) (*PostsAddResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Posts")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	caller := c.callAdd
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PostsAddRequest) (*PostsAddResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PostsAddRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PostsAddRequest) when calling interceptor")
					}
					return c.callAdd(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PostsAddResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PostsAddResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *postsJSONClient) callAdd(ctx context.Context, in *PostsAddRequest) (*PostsAddResponse, error) {
	out := new(PostsAddResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *postsJSONClient) ToggleLike(ctx context.Context, in *ToggleLikeRequest) (*ToggleLikeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Posts")
	ctx = ctxsetters.WithMethodName(ctx, "ToggleLike")
	caller := c.callToggleLike
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ToggleLikeRequest) (*ToggleLikeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ToggleLikeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ToggleLikeRequest) when calling interceptor")
					}
					return c.callToggleLike(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ToggleLikeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ToggleLikeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *postsJSONClient) callToggleLike(ctx context.Context, in *ToggleLikeRequest) (*ToggleLikeResponse, error) {
	out := new(ToggleLikeResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *postsJSONClient) AddComment(ctx context.Context, in *AddCommentRequest) (*AddCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Posts")
	ctx = ctxsetters.WithMethodName(ctx, "AddComment")
	caller := c.callAddComment
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddCommentRequest) (*AddCommentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddCommentRequest) when calling interceptor")
					}
					return c.callAddComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *postsJSONClient) callAddComment(ctx context.Context, in *AddCommentRequest) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ====================
// Posts Server Handler
// ====================

type postsServer struct {
	Posts
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
}

// NewPostsServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewPostsServer(svc Posts, opts ...interface{}) TwirpServer {
	serverOpts := twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(&serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(&serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T on NewPostsServer", o))
		}
	}

	return &postsServer{
		Posts:            svc,
		pathPrefix:       serverOpts.PathPrefix(),
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		hooks:            serverOpts.Hooks,
		jsonSkipDefaults: serverOpts.JSONSkipDefaults,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *postsServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *postsServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// PostsPathPrefix is a convenience constant that could used to identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// that add a "/twirp" prefix by default, and use CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const PostsPathPrefix = "/twirp/meme.Posts/"

func (s *postsServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Posts")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "meme.Posts" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Add":
		s.serveAdd(ctx, resp, req)
		return
	case "ToggleLike":
		s.serveToggleLike(ctx, resp, req)
		return
	case "AddComment":
		s.serveAddComment(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *postsServer) serveAdd(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *postsServer) serveAddJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PostsAddRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Posts.Add
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PostsAddRequest) (*PostsAddResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PostsAddRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PostsAddRequest) when calling interceptor")
					}
					return s.Posts.Add(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PostsAddResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PostsAddResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PostsAddResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PostsAddResponse and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: true, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *postsServer) serveAddProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PostsAddRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Posts.Add
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PostsAddRequest) (*PostsAddResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PostsAddRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PostsAddRequest) when calling interceptor")
					}
					return s.Posts.Add(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PostsAddResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PostsAddResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PostsAddResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PostsAddResponse and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *postsServer) serveToggleLike(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveToggleLikeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveToggleLikeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *postsServer) serveToggleLikeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ToggleLike")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ToggleLikeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Posts.ToggleLike
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ToggleLikeRequest) (*ToggleLikeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ToggleLikeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ToggleLikeRequest) when calling interceptor")
					}
					return s.Posts.ToggleLike(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ToggleLikeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ToggleLikeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ToggleLikeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ToggleLikeResponse and nil error while calling ToggleLike. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: true, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *postsServer) serveToggleLikeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ToggleLike")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ToggleLikeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Posts.ToggleLike
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ToggleLikeRequest) (*ToggleLikeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ToggleLikeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ToggleLikeRequest) when calling interceptor")
					}
					return s.Posts.ToggleLike(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ToggleLikeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ToggleLikeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ToggleLikeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ToggleLikeResponse and nil error while calling ToggleLike. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *postsServer) serveAddComment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddCommentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddCommentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *postsServer) serveAddCommentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddCommentRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Posts.AddComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddCommentRequest) (*AddCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddCommentRequest) when calling interceptor")
					}
					return s.Posts.AddComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddCommentResponse and nil error while calling AddComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: true, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *postsServer) serveAddCommentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddCommentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Posts.AddComment
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddCommentRequest) (*AddCommentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddCommentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddCommentRequest) when calling interceptor")
					}
					return s.Posts.AddComment(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddCommentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddCommentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddCommentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddCommentResponse and nil error while calling AddComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *postsServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *postsServer) ProtocGenTwirpVersion() string {
	return "v8.0.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *postsServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "meme", "Posts")
}

var twirpFileDescriptor1 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x8d, 0x6d, 0xa3, 0x4e, 0x41, 0xdb, 0x41, 0xdb, 0xd0, 0x43, 0x29, 0x0b, 0x82, 0x07,
	0x89, 0x50, 0x8b, 0xd7, 0x12, 0x8b, 0x87, 0x62, 0x11, 0x89, 0xf6, 0xe2, 0xad, 0xed, 0x0e, 0xb5,
	0x34, 0xc9, 0xc6, 0xec, 0x16, 0xbc, 0xfb, 0xc3, 0xfc, 0x6b, 0x92, 0xcd, 0x86, 0x84, 0x86, 0x7a,
	0xdb, 0x79, 0x79, 0x7c, 0x33, 0xf3, 0x26, 0xd0, 0x8c, 0x85, 0x54, 0xd2, 0x8d, 0x13, 0xa1, 0x04,
	0xd6, 0x43, 0x0a, 0x89, 0x5d, 0xc3, 0xc5, 0x6b, 0x2a, 0x7a, 0x9c, 0xfb, 0xf4, 0xb5, 0x23, 0xa9,
	0x10, 0xa1, 0xae, 0xe8, 0x5b, 0x39, 0xd6, 0xc0, 0xba, 0x39, 0xf3, 0xf5, 0x9b, 0xdd, 0x42, 0xab,
	0xb0, 0xc9, 0x58, 0x44, 0x92, 0xd0, 0x81, 0x93, 0x94, 0x37, 0x4f, 0x02, 0x63, 0xcd, 0x4b, 0xf6,
	0x63, 0x41, 0xfb, 0x5d, 0xac, 0xd7, 0x01, 0xcd, 0x36, 0x5b, 0xca, 0xb9, 0x0f, 0x60, 0x2f, 0x56,
	0x6a, 0x23, 0x22, 0x6d, 0x3f, 0x1f, 0xf6, 0xdd, 0x74, 0x02, 0xb7, 0x62, 0x74, 0x3d, 0xed, 0xf2,
	0x8d, 0x1b, 0x3b, 0x60, 0xa7, 0xe0, 0x29, 0x77, 0x8e, 0x75, 0x1b, 0x53, 0xb1, 0x3e, 0xd8, 0x99,
	0x13, 0x4f, 0xa1, 0x3e, 0x9b, 0x3e, 0x3f, 0xb5, 0x8e, 0x10, 0xc0, 0x9e, 0xbf, 0xe8, 0xb7, 0xc5,
	0x46, 0x80, 0x65, 0xb6, 0x99, 0xba, 0x0f, 0x10, 0x6c, 0xb6, 0x24, 0x27, 0x62, 0x17, 0x65, 0x3b,
	0x36, 0xfc, 0x92, 0xc2, 0xc6, 0xd0, 0xf6, 0x38, 0x9f, 0x88, 0x30, 0xa4, 0x48, 0xfd, 0x13, 0xc9,
	0xc1, 0xb1, 0x2e, 0x01, 0xcb, 0x80, 0xac, 0x2d, 0x7b, 0x83, 0xae, 0x91, 0x26, 0x22, 0x8c, 0x85,
	0xa4, 0xc4, 0xa7, 0x88, 0x53, 0x42, 0x49, 0x09, 0x64, 0x95, 0x41, 0x38, 0x80, 0x66, 0x1c, 0x2c,
	0x56, 0xf4, 0x29, 0x02, 0x4e, 0x89, 0xe9, 0x52, 0x96, 0x86, 0xbf, 0x16, 0x34, 0xf4, 0x59, 0x70,
	0x04, 0x35, 0x8f, 0x73, 0xbc, 0xca, 0x22, 0xdd, 0xbb, 0x68, 0xaf, 0xb3, 0x2f, 0x9b, 0x2c, 0xc6,
	0x00, 0x45, 0x42, 0xd8, 0x3d, 0x70, 0x8f, 0x9e, 0x53, 0xfd, 0x50, 0x00, 0x8a, 0x5d, 0x73, 0x40,
	0x25, 0xbe, 0x1c, 0x50, 0x8d, 0xe5, 0xb1, 0xf1, 0x51, 0xbb, 0x8b, 0x97, 0x4b, 0x5b, 0xff, 0x92,
	0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xfd, 0x56, 0x4e, 0xa1, 0x02, 0x00, 0x00,
}

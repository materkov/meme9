// Code generated by protoc-gen-twirp v8.0.0, DO NOT EDIT.
// source: renderer.proto

package pb

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the twirp package used in your project.
// A compilation error at this line likely means your copy of the
// twirp package needs to be updated.
const _ = twirp.TwirpPackageIsVersion7

// ===============
// Utils Interface
// ===============

type Utils interface {
	ResolveRoute(context.Context, *ResolveRouteRequest) (*UniversalRenderer, error)
}

// =====================
// Utils Protobuf Client
// =====================

type utilsProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUtilsProtobufClient creates a Protobuf client that implements the Utils interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUtilsProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Utils {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "meme", "Utils")
	urls := [1]string{
		serviceURL + "ResolveRoute",
	}

	return &utilsProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *utilsProtobufClient) ResolveRoute(ctx context.Context, in *ResolveRouteRequest) (*UniversalRenderer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Utils")
	ctx = ctxsetters.WithMethodName(ctx, "ResolveRoute")
	caller := c.callResolveRoute
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResolveRouteRequest) (*UniversalRenderer, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResolveRouteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResolveRouteRequest) when calling interceptor")
					}
					return c.callResolveRoute(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UniversalRenderer)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UniversalRenderer) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *utilsProtobufClient) callResolveRoute(ctx context.Context, in *ResolveRouteRequest) (*UniversalRenderer, error) {
	out := new(UniversalRenderer)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =================
// Utils JSON Client
// =================

type utilsJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUtilsJSONClient creates a JSON client that implements the Utils interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUtilsJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Utils {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "meme", "Utils")
	urls := [1]string{
		serviceURL + "ResolveRoute",
	}

	return &utilsJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *utilsJSONClient) ResolveRoute(ctx context.Context, in *ResolveRouteRequest) (*UniversalRenderer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Utils")
	ctx = ctxsetters.WithMethodName(ctx, "ResolveRoute")
	caller := c.callResolveRoute
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResolveRouteRequest) (*UniversalRenderer, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResolveRouteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResolveRouteRequest) when calling interceptor")
					}
					return c.callResolveRoute(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UniversalRenderer)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UniversalRenderer) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *utilsJSONClient) callResolveRoute(ctx context.Context, in *ResolveRouteRequest) (*UniversalRenderer, error) {
	out := new(UniversalRenderer)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ====================
// Utils Server Handler
// ====================

type utilsServer struct {
	Utils
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
}

// NewUtilsServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewUtilsServer(svc Utils, opts ...interface{}) TwirpServer {
	serverOpts := twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(&serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(&serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T on NewUtilsServer", o))
		}
	}

	return &utilsServer{
		Utils:            svc,
		pathPrefix:       serverOpts.PathPrefix(),
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		hooks:            serverOpts.Hooks,
		jsonSkipDefaults: serverOpts.JSONSkipDefaults,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *utilsServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *utilsServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// UtilsPathPrefix is a convenience constant that could used to identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// that add a "/twirp" prefix by default, and use CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const UtilsPathPrefix = "/twirp/meme.Utils/"

func (s *utilsServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "meme")
	ctx = ctxsetters.WithServiceName(ctx, "Utils")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "meme.Utils" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "ResolveRoute":
		s.serveResolveRoute(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *utilsServer) serveResolveRoute(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveResolveRouteJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveResolveRouteProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *utilsServer) serveResolveRouteJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResolveRoute")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ResolveRouteRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Utils.ResolveRoute
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResolveRouteRequest) (*UniversalRenderer, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResolveRouteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResolveRouteRequest) when calling interceptor")
					}
					return s.Utils.ResolveRoute(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UniversalRenderer)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UniversalRenderer) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UniversalRenderer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UniversalRenderer and nil error while calling ResolveRoute. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: true, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *utilsServer) serveResolveRouteProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResolveRoute")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ResolveRouteRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Utils.ResolveRoute
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResolveRouteRequest) (*UniversalRenderer, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResolveRouteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResolveRouteRequest) when calling interceptor")
					}
					return s.Utils.ResolveRoute(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UniversalRenderer)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UniversalRenderer) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UniversalRenderer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UniversalRenderer and nil error while calling ResolveRoute. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *utilsServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *utilsServer) ProtocGenTwirpVersion() string {
	return "v8.0.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *utilsServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "meme", "Utils")
}

var twirpFileDescriptor2 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0xd3, 0x3f, 0x41, 0x70, 0xad, 0x0a, 0x35, 0x20, 0x20, 0x13, 0xea, 0x02, 0x53, 0x90,
	0xc2, 0xc2, 0x84, 0x44, 0x06, 0x88, 0x04, 0x43, 0x64, 0xa9, 0x0b, 0x5b, 0xaa, 0x5c, 0x4b, 0x24,
	0x37, 0x0e, 0xb6, 0xd3, 0xaf, 0xcb, 0x57, 0x41, 0xb6, 0x9b, 0xe0, 0xa4, 0x6c, 0xb9, 0x7b, 0xef,
	0xf7, 0x72, 0xbe, 0x83, 0x99, 0xc0, 0x32, 0x47, 0x81, 0x22, 0xac, 0x04, 0x57, 0x9c, 0x8c, 0xb7,
	0xb8, 0xc5, 0x00, 0xb2, 0xaa, 0x88, 0x6c, 0x27, 0x98, 0x30, 0xbe, 0x29, 0xca, 0xa6, 0xa8, 0xb8,
	0x54, 0xd2, 0x16, 0x8b, 0x9f, 0x21, 0xcc, 0x97, 0x65, 0xb1, 0x43, 0x21, 0x33, 0x46, 0xf7, 0x39,
	0xe4, 0x05, 0x4e, 0x2b, 0xc1, 0xd7, 0x05, 0xc3, 0xa6, 0x75, 0x3d, 0xb8, 0x1d, 0xdc, 0x4f, 0xa2,
	0xcb, 0x50, 0x67, 0x87, 0x69, 0x57, 0x4c, 0x3c, 0xda, 0xf7, 0x93, 0x27, 0x98, 0xae, 0x11, 0xf3,
	0x96, 0x1f, 0x1a, 0x9e, 0x58, 0xfe, 0xd5, 0x51, 0x12, 0x8f, 0x76, 0x9c, 0x9a, 0xd4, 0x13, 0xb6,
	0xe4, 0xc8, 0x25, 0x53, 0x47, 0xd1, 0xa4, 0xeb, 0x24, 0xcf, 0x30, 0xfb, 0xc2, 0x2c, 0x47, 0xd1,
	0xb2, 0x63, 0xc3, 0x5e, 0x58, 0x36, 0xe9, 0x68, 0x89, 0x47, 0x7b, 0x6e, 0xf2, 0x06, 0x73, 0xb3,
	0xa8, 0x34, 0xdb, 0xfc, 0x3d, 0xdc, 0x37, 0x11, 0x57, 0x36, 0xe2, 0xa3, 0x2f, 0x27, 0x1e, 0x3d,
	0x64, 0x62, 0x80, 0xe3, 0xe6, 0x26, 0x8b, 0x3b, 0x38, 0xa7, 0x28, 0x39, 0xdb, 0x21, 0xe5, 0xb5,
	0x42, 0x8a, 0xdf, 0x35, 0x4a, 0x45, 0xce, 0x60, 0x54, 0x0b, 0x66, 0xd6, 0x7a, 0x42, 0xf5, 0x67,
	0xf4, 0x0e, 0xfe, 0x52, 0x15, 0x4c, 0x92, 0x18, 0xa6, 0x2e, 0x41, 0x6e, 0xec, 0xbf, 0xff, 0x49,
	0x09, 0xf6, 0x63, 0x1d, 0x5c, 0x30, 0xf6, 0x3f, 0x47, 0x0f, 0xd5, 0x6a, 0x75, 0x64, 0xae, 0xfc,
	0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xc3, 0x6e, 0x96, 0x23, 0x02, 0x00, 0x00,
}
